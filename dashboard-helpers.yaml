# Helper Entities for Irrigation Dashboard
# Add these to your configuration.yaml or helpers via UI

input_text:
  schedule_name:
    name: Schedule Name
    initial: "New Schedule"
    icon: mdi:form-textbox

  schedule_moisture_sensor:
    name: Soil Moisture Sensor Entity
    initial: ""
    icon: mdi:water-percent

input_select:
  schedule_valve:
    name: Select Valve
    options:
      - Water Valve 1
      - Water Valve 2
      - Water Valve 3
      - Water Valve 4
    initial: Water Valve 1
    icon: mdi:pipe-valve

  schedule_run_type:
    name: Run Type
    options:
      - duration
      - volume
    initial: duration
    icon: mdi:timer

input_number:
  schedule_duration_minutes:
    name: Duration (minutes)
    min: 1
    max: 120
    step: 1
    initial: 15
    unit_of_measurement: min
    icon: mdi:timer

  schedule_volume_liters:
    name: Volume (liters)
    min: 1
    max: 500
    step: 1
    initial: 50
    unit_of_measurement: L
    icon: mdi:water

  schedule_interval_hours:
    name: Interval (hours)
    min: 1
    max: 168
    step: 1
    initial: 12
    unit_of_measurement: h
    icon: mdi:clock

  schedule_max_moisture:
    name: Max Soil Moisture (%)
    min: 0
    max: 100
    step: 5
    initial: 50
    unit_of_measurement: "%"
    icon: mdi:water-percent

  schedule_min_temp:
    name: Min Temperature (째C)
    min: -10
    max: 50
    step: 1
    initial: 10
    unit_of_measurement: "째C"
    icon: mdi:thermometer-low

  schedule_max_temp:
    name: Max Temperature (째C)
    min: 0
    max: 50
    step: 1
    initial: 35
    unit_of_measurement: "째C"
    icon: mdi:thermometer-high

input_datetime:
  schedule_time_1:
    name: Time 1
    has_date: false
    has_time: true
    initial: "06:00"

  schedule_time_2:
    name: Time 2 (optional)
    has_date: false
    has_time: true
    initial: "18:00"

input_boolean:
  schedule_monday:
    name: Monday
    initial: true
    icon: mdi:calendar

  schedule_tuesday:
    name: Tuesday
    initial: true
    icon: mdi:calendar

  schedule_wednesday:
    name: Wednesday
    initial: true
    icon: mdi:calendar

  schedule_thursday:
    name: Thursday
    initial: true
    icon: mdi:calendar

  schedule_friday:
    name: Friday
    initial: true
    icon: mdi:calendar

  schedule_saturday:
    name: Saturday
    initial: false
    icon: mdi:calendar

  schedule_sunday:
    name: Sunday
    initial: false
    icon: mdi:calendar

  schedule_skip_if_rain:
    name: Skip if Rained
    initial: false
    icon: mdi:weather-rainy

# Template Sensors for Dashboard
template:
  - sensor:
      - name: "Irrigation Total Today"
        unique_id: irrigation_total_today
        unit_of_measurement: "L"
        icon: mdi:water
        state: >
          {% set v1 = states('sensor.water_valve_1_session_used') | float(0) %}
          {% set v2 = states('sensor.water_valve_2_session_used') | float(0) %}
          {% set v3 = states('sensor.water_valve_3_session_used') | float(0) %}
          {% set v4 = states('sensor.water_valve_4_session_used') | float(0) %}
          {{ (v1 + v2 + v3 + v4) | round(1) }}

      - name: "Irrigation Active Schedules"
        unique_id: irrigation_active_schedules
        icon: mdi:calendar-check
        state: >
          {# This would need to query Supabase - placeholder for now #}
          {{ 0 }}
        attributes:
          friendly_name: "Active Schedules"

# Scripts for Schedule Creation
script:
  create_time_based_schedule:
    alias: Create Time-Based Schedule
    icon: mdi:calendar-plus
    mode: single
    sequence:
      - service: z2m_irrigation.create_schedule
        data:
          name: "{{ states('input_text.schedule_name') }}"
          valve: "{{ states('input_select.schedule_valve') }}"
          schedule_type: "time_based"
          times: >
            {% set times = [] %}
            {% if states('input_datetime.schedule_time_1') %}
              {% set times = times + [states('input_datetime.schedule_time_1')] %}
            {% endif %}
            {% if states('input_datetime.schedule_time_2') != '18:00:00' %}
              {% set times = times + [states('input_datetime.schedule_time_2')] %}
            {% endif %}
            {{ times }}
          days_of_week: >
            {% set days = [] %}
            {% if is_state('input_boolean.schedule_monday', 'on') %}
              {% set days = days + [0] %}
            {% endif %}
            {% if is_state('input_boolean.schedule_tuesday', 'on') %}
              {% set days = days + [1] %}
            {% endif %}
            {% if is_state('input_boolean.schedule_wednesday', 'on') %}
              {% set days = days + [2] %}
            {% endif %}
            {% if is_state('input_boolean.schedule_thursday', 'on') %}
              {% set days = days + [3] %}
            {% endif %}
            {% if is_state('input_boolean.schedule_friday', 'on') %}
              {% set days = days + [4] %}
            {% endif %}
            {% if is_state('input_boolean.schedule_saturday', 'on') %}
              {% set days = days + [5] %}
            {% endif %}
            {% if is_state('input_boolean.schedule_sunday', 'on') %}
              {% set days = days + [6] %}
            {% endif %}
            {{ days if days | length > 0 else none }}
          run_type: "{{ states('input_select.schedule_run_type') }}"
          run_value: >
            {% if states('input_select.schedule_run_type') == 'duration' %}
              {{ states('input_number.schedule_duration_minutes') | float }}
            {% else %}
              {{ states('input_number.schedule_volume_liters') | float }}
            {% endif %}
          conditions: >
            {% set cond = {} %}
            {% if states('input_text.schedule_moisture_sensor') | length > 0 %}
              {% set cond = dict(cond, **{'soil_moisture_entity': states('input_text.schedule_moisture_sensor'), 'max_moisture': states('input_number.schedule_max_moisture') | int}) %}
            {% endif %}
            {% if states('input_number.schedule_min_temp') | float > 0 %}
              {% set cond = dict(cond, **{'min_temp': states('input_number.schedule_min_temp') | float}) %}
            {% endif %}
            {% if states('input_number.schedule_max_temp') | float < 50 %}
              {% set cond = dict(cond, **{'max_temp': states('input_number.schedule_max_temp') | float}) %}
            {% endif %}
            {% if is_state('input_boolean.schedule_skip_if_rain', 'on') %}
              {% set cond = dict(cond, **{'skip_if_rain': true}) %}
            {% endif %}
            {{ cond if cond | length > 0 else {} }}
          enabled: true
      - service: persistent_notification.create
        data:
          title: "Schedule Created"
          message: "Time-based schedule '{{ states('input_text.schedule_name') }}' has been created successfully!"

  create_interval_schedule:
    alias: Create Interval Schedule
    icon: mdi:timer-plus
    mode: single
    sequence:
      - service: z2m_irrigation.create_schedule
        data:
          name: "{{ states('input_text.schedule_name') }}"
          valve: "{{ states('input_select.schedule_valve') }}"
          schedule_type: "interval"
          interval_hours: "{{ states('input_number.schedule_interval_hours') | int }}"
          run_type: "{{ states('input_select.schedule_run_type') }}"
          run_value: >
            {% if states('input_select.schedule_run_type') == 'duration' %}
              {{ states('input_number.schedule_duration_minutes') | float }}
            {% else %}
              {{ states('input_number.schedule_volume_liters') | float }}
            {% endif %}
          conditions: >
            {% set cond = {} %}
            {% if states('input_text.schedule_moisture_sensor') | length > 0 %}
              {% set cond = dict(cond, **{'soil_moisture_entity': states('input_text.schedule_moisture_sensor'), 'max_moisture': states('input_number.schedule_max_moisture') | int}) %}
            {% endif %}
            {% if states('input_number.schedule_min_temp') | float > 0 %}
              {% set cond = dict(cond, **{'min_temp': states('input_number.schedule_min_temp') | float}) %}
            {% endif %}
            {% if states('input_number.schedule_max_temp') | float < 50 %}
              {% set cond = dict(cond, **{'max_temp': states('input_number.schedule_max_temp') | float}) %}
            {% endif %}
            {% if is_state('input_boolean.schedule_skip_if_rain', 'on') %}
              {% set cond = dict(cond, **{'skip_if_rain': true}) %}
            {% endif %}
            {{ cond if cond | length > 0 else {} }}
          enabled: true
      - service: persistent_notification.create
        data:
          title: "Schedule Created"
          message: "Interval schedule '{{ states('input_text.schedule_name') }}' has been created successfully!"
